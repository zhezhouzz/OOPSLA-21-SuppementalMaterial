program:

let rec ins default i a m =
  match m with
  | e ->
    (match i with
     | nil -> triet(e, a, e)
     | cons z i' ->
       if z > 0
       then triet(ins default i' a e, default, e)
       else triet(e, default, ins default i' a e)
    )
  | triet(l, y, r) ->
    (match i with
     | nil -> triet(l, a, r)
     | cons z i' ->
       if z > 0
       then triet(ins default i' a l, y, r)
       else triet(l, y, ins default i' a r)
    )

F:
nil,cons,e,triet

P:
list_member,tree_member

assertion:
fun int:default,int list:i,int:a,int tree:m,int tree:nu -> forall int:u,(
 tree_member(nu,u) ==> 
 (tree_member(m,u) || (u==default) || (u==a))
)

result:
cons(int:i_0,int list:il_0,int list:il_1):=
forall int:u_0 int:u_1,(
 (
  list_member(il_1,u_0) ||
  !(u_0==i_0)
 ) ||
true
)
e(int tree:it_0):=
forall int:u_0 int:u_1,(
 !tree_member(it_0,u_0) ||
true
)
nil(int list:il_0):=
forall int:u_0,true
triet(int tree:it_0,int:i_0,int tree:it_1,int tree:it_2):=
forall int:u_0 int:u_1,(
 (ite tree_member(it_2,u_0)
     (
      (u_0==i_0) ||
      (tree_member(it_0,u_0) || tree_member(it_1,u_0))
     )
     (
      !tree_member(it_0,u_0) &&
      (
       !(u_0==i_0) &&
       !tree_member(it_1,u_0)
      )
     )) ||
 (ite (u_1==u_0)
     (ite tree_member(it_2,u_0)
         (
          (u_0==i_0) ||
          (tree_member(it_0,u_0) || tree_member(it_1,u_0))
         )
         (ite tree_member(it_0,u_0)
             (ite tree_member(it_1,u_0)
                 (
                  (u_0==i_0) &&
                  !(i_0==i_0)
                 )
                 (
                  (u_0==i_0) &&
                  !(i_0==i_0)
                 ))
             (
              !(u_0==i_0) ||
              (
               !(i_0==i_0) ||
               tree_member(it_0,i_0)
              )
             )))
     (
      !(u_1==i_0) ||
      (
       !tree_member(it_1,u_0) ||
       (
        tree_member(it_2,u_0) ||
        (
         !tree_member(it_2,i_0) ||
         (tree_member(it_0,u_0) || (u_0==i_0))
        )
       )
      )
     ))
)
